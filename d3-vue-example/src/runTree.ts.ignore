import parseLisp from "./parseLisp";
import * as d3 from "d3";
import * as d3h from "d3-hierarchy";

export const toTreeData = ([p, ...cs], parent = "null") => {
    return {
        name: p,
        parent,
        children: cs.map(c =>
            Array.isArray(c) ?
            toTreeData(c, p) : {
                name: c,
                parent: p
            }
        )
    };
};

const runTree = input => {
    const parsed = parseLisp(input);
    const treeData = [toTreeData(parsed)];

    // ************** Generate the tree diagram	 *****************
    const margin = {
            top: 20,
            right: 120,
            bottom: 20,
            left: 120
        },
        width = 960 - margin.right - margin.left,
        height = 500 - margin.top - margin.bottom;

    let i = 0;
    const duration = 1; //750,
    // @ts-ignore
    let root;

    const tree = d3.tree().size([height, width]);

    const diagonal = function link(d: d3.HierarchyNode) {
        return (
            "M" +
            d.source.y +
            "," +
            d.source.x +
            "C" +
            (d.source.y + d.target.y) / 2 +
            "," +
            d.source.x +
            " " +
            (d.source.y + d.target.y) / 2 +
            "," +
            d.target.x +
            " " +
            d.target.y +
            "," +
            d.target.x
        );
    };

    const svg = d3
        .select("treeContainer")
        .append("svg")
        .attr("width", width + margin.right + margin.left)
        .attr("height", height + margin.top + margin.bottom)
        .attr("id", "tree")
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    root = treeData[0];
    root.x0 = height / 2;
    root.y0 = 0;

    // Toggle children on click.
    function click(_update) {
        return d => {
            if (d.children) {
                d._children = d.children;
                d.children = null;
            } else {
                d.children = d._children;
                d._children = null;
            }
            _update;
        };
    }

    function update(source) {
        const tr = d3h.hierarchy(root);
        const _tree = d3h.tree(tr);
        const nodes = tr.descendants();
        const links = tr.links();
        // Compute the new tree layout.
        // const nodes = tree.nodes(root).reverse(),
        //   links = tree.links(nodes);

        // Normalize for fixed-depth.
        nodes.forEach(function(d) {
            d.y = d.depth * 180;
        });

        // Update the nodes…
        const node = svg.selectAll("g.node").data(nodes, function(d) {
            return d.id || (d.id = ++i);
        });

        // Enter any new nodes at the parent's previous position.
        const nodeEnter = node
            .enter()
            .append("g")
            .attr("class", "node")
            .attr("transform", function() {
                return "translate(" + source.y0 + "," + source.x0 + ")";
            })
            .on("click", click(update));

        nodeEnter
            .append("circle")
            .attr("r", 1e-6)
            .style("fill", function(d) {
                return d._children ? "lightsteelblue" : "#fff";
            });

        nodeEnter
            .append("text")
            .attr("x", function(d) {
                return d.children || d._children ? -13 : 13;
            })
            .attr("dy", ".35em")
            .attr("text-anchor", function(d) {
                return d.children || d._children ? "end" : "start";
            })
            .text(function(d) {
                return d.name;
            })
            .style("fill-opacity", 1e-6);

        // Transition nodes to their new position.
        const nodeUpdate = node
            .transition()
            .duration(duration)
            .attr("transform", function(d) {
                return "translate(" + d.y + "," + d.x + ")";
            });

        nodeUpdate
            .select("circle")
            .attr("r", 10)
            .style("fill", function(d) {
                return d._children ? "lightsteelblue" : "#fff";
            });

        nodeUpdate.select("text").style("fill-opacity", 1);

        // Transition exiting nodes to the parent's new position.
        const nodeExit = node
            .exit()
            .transition()
            .duration(duration)
            .attr("transform", function() {
                return "translate(" + source.y + "," + source.x + ")";
            })
            .remove();

        nodeExit.select("circle").attr("r", 1e-6);

        nodeExit.select("text").style("fill-opacity", 1e-6);

        // Update the links…
        const link = svg.selectAll("path.link").data(links, function(d) {
            return d.target.id;
        });

        // Enter any new links at the parent's previous position.
        link
            .enter()
            .insert("path", "g")
            .attr("class", "link")
            .attr("d", function() {
                const o = {
                    x: source.x0,
                    y: source.y0
                };
                return diagonal({
                    source: o,
                    target: o
                });
            });

        // Transition links to their new position.
        link
            .transition()
            .duration(duration)
            .attr("d", diagonal);

        // Transition exiting nodes to the parent's new position.
        link
            .exit()
            .transition()
            .duration(duration)
            .attr("d", function() {
                const o = {
                    x: source.x,
                    y: source.y
                };
                return diagonal({
                    source: o,
                    target: o
                });
            })
            .remove();

        // Stash the old positions for transition.
        nodes.forEach(function(d) {
            d.x0 = d.x;
            d.y0 = d.y;
        });
    }

    update(root);

    console.log(`set up d3`);
    d3.select(self.frameElement).style("height", "600px");
};

export default runTree;
